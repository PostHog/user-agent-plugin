"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]})}_export(exports,{processEvent:function(){return processEvent},setupPlugin:function(){return setupPlugin}});const _detectbrowser=require("detect-browser");function setupPlugin({config,global}){try{global.enableSegmentAnalyticsJs=config.enableSegmentAnalyticsJs==="true";global.overrideUserAgentDetails=config.overrideUserAgentDetails==="true";global.debugMode=config.debugMode==="true"}catch(e){throw new Error("Failed to read the configuration")}}async function processEvent(event,{global}){const availableKeysOfEvent=Object.keys(event.properties);let userAgent="";if(global.enableSegmentAnalyticsJs){const hasSegmentUserAgentKey=availableKeysOfEvent.includes("segment_userAgent");if(!hasSegmentUserAgentKey){if(global.debugMode){console.warn(`UserAgentPlugin.processEvent(): Event is missing segment_userAgent`)}return event}userAgent=`${event.properties.segment_userAgent}`}else{const hasUserAgentKey=availableKeysOfEvent.includes("$user-agent")||availableKeysOfEvent.includes("$useragent")||availableKeysOfEvent.includes("$user_agent");if(!hasUserAgentKey){if(global.debugMode){console.warn(`UserAgentPlugin.processEvent(): Event is missing $useragent or $user-agent`)}return event}if(event.properties.$useragent){userAgent=event.properties.$useragent}else if(event.properties["$user-agent"]){userAgent=event.properties["$user-agent"]}else if(event.properties.$user_agent){userAgent=event.properties.$user_agent}delete event.properties.$useragent;delete event.properties["$user-agent"];delete event.properties.$user_agent}if(!userAgent||userAgent===""){if(global.debugMode){console.warn(`UserAgentPlugin.processEvent(): $useragent is empty`)}return event}const agentInfo=(0,_detectbrowser.detect)(userAgent);const device=detectDevice(userAgent);const deviceType=detectDeviceType(userAgent);const eventProperties=Object.keys(event.properties);const hasBrowserProperties=eventProperties.some(value=>["$browser","$browser_version","$os","$device","$device_type"].includes(value));if(!global.overrideUserAgentDetails&&hasBrowserProperties){if(global.debugMode){console.warn(`UserAgentPlugin.processEvent(): The event has $browser, $browser_version, $os, $device, or $device_type but the option 'overrideUserAgentDetails' is not enabled.`)}return event}event.properties["$device"]=device;event.properties["$device_type"]=deviceType;if(agentInfo){event.properties["$browser"]=agentInfo.name;event.properties["$browser_version"]=agentInfo.version;event.properties["$os"]=agentInfo.os;event.properties["$browser_type"]=agentInfo.type}return event}function detectDevice(userAgent){if(/Windows Phone/i.test(userAgent)||/WPDesktop/.test(userAgent)){return"Windows Phone"}else if(/iPad/.test(userAgent)){return"iPad"}else if(/iPod/.test(userAgent)){return"iPod Touch"}else if(/iPhone/.test(userAgent)){return"iPhone"}else if(/(BlackBerry|PlayBook|BB10)/i.test(userAgent)){return"BlackBerry"}else if(/Android/.test(userAgent)&&!/Mobile/.test(userAgent)){return"Android Tablet"}else if(/Android/.test(userAgent)){return"Android"}else{return""}}function detectDeviceType(userAgent){const device=detectDevice(userAgent);if(device==="iPad"||device==="Android Tablet"){return"Tablet"}else if(device){return"Mobile"}else{return"Desktop"}}
